# -*- coding: utf-8 -*-######################################## Lecture du fichier ligne par ligne  ## et importation des données          ########################################def LireFichierTCD(name) :    u""" Lecture d'un fichier ASCII contenant les 3 colonnes temps/contrainte/déformation.         Le nom du fichier à lire est obligatoirement donné avec l'argument 'name'."""    time, stress, strain = [], [], []    f = open(name, 'r')    for line in f:        if line[0].isdigit() :            t, c, d = map(float, line.split())            time.append(t)            stress.append(c*1.e-6) # conversion en MPa            strain.append(d)    f.close()    return time, stress, strain############################ Création des graphiques ############################def TracerTCD(time, stress, strain, name=None) :    u""" Fonction pour tracer les courbes correspondant aux         3 arguments recquis 'time', 'stress' et 'strain'.         Si l'argument 'name' est donné, c'est le nom d'un fichier png         qui contiendra l'image des courbes tracées."""    # importation du module pyplot    import matplotlib.pyplot as plt    plt.figure()    plt.subplots_adjust(hspace=0.5)    plt.subplot(211) # 2 lignes, une colonne, graphique no.1    plt.title("Stress, Strain vs. Time")    plt.grid(True)    plt.xlabel('Time [s]')    plt.xlim(0,2.3)    plt.ylabel('Stress [MPa]', color='b')    plt.ylim(0,50.0)    plt.plot(time, stress,'x-b')    plt.twinx()    plt.xlim(0,2.3)    plt.ylabel('Strain', color='r')    plt.ylim(0,1.e-2)    plt.plot(time, strain,'x-r')    plt.subplot(212) # 2 lignes, une colonne, graphique no.2    plt.title("Stress vs. Strain", color='g')    plt.grid(True)    plt.xlabel('Strain')    plt.xlim(0,6e-3)    plt.ylabel('Stress [MPa]')    plt.ylim(0,40.0)    plt.plot(strain,stress,'x-g')    if name == None :        plt.show()    else :        plt.savefig(name, format='png', dpi=300)############################################################ Calcul de la densité volumique d'énergie de déformation ############################################################def CalculerW(Lc, Ld) :    return [ 0.01*Lc[i]*Ld[i] for i in range(len(Lc)) ]################################################################ Écriture du fichier ASCII contenant les colonnes            ## temps | Contrainte | déformation | densité volumique        ##       |            |             | d'énergie de déformation ################################################################def EcrireFichierTCDW(Lt, Lc, Ld, Lw, name) :    f = open(name, 'w')    f.write('# Time [s]\tStress [MPa]\tStrain [%]\tW [MJ.m^-3]\n')    for i in range(len(Lt)) :        chne='%.4e\t%.4e\t%.4e\t%.4e\n' % (Lt[i],Lc[i],Ld[i],Lw[i])        f.write(chne)    f.write('# Creation : '+Maintenant())    f.close()    ################## Date et heure ##################def Maintenant() :    from time import strftime    from locale import setlocale, LC_TIME    setlocale(LC_TIME, '') # adopter la localisation par defaut (french)    return strftime('%A %d %B %Y, %H:%M:%S') # voir : http://strftime.org/################################################### test du module TraiterTCD incorpore au fichier ###################################################if __name__=='__main__' :    print u'Tests du module TraiterTCD'    print u'Début :', Maintenant()    print u'Test de la fonction LireFichierTCDmodule'    t, c, d = LireFichierTCD('data001.txt')    print u'Test de la fonction TracerTCD() avec 3 arguments'    TracerTCD(t, c, d)    print u'Test de la fonction TracerTCD() avec 4 arguments'    TracerTCD(t, c, d, 'data001.png')    print u'Test de la fonction CalculerW'    w = CalculerW(c, d)    print u'Test de la fonction EcrireFichierTCDW()'    EcrireFichierTCDW(t, c, d, w, 'data001W.txt')     print 'Fin   :', Maintenant()   